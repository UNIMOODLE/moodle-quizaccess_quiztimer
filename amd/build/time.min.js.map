{"version":3,"file":"time.min.js","sources":["../src/time.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n/**\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine(['jquery', 'core/ajax', 'core/notification', 'core/str'], function($, ajax, notification, str) {\n\n    const urlparams = new URLSearchParams(window.location.search);\n    const cmid = urlparams.get('cmid');\n    \n    const selectstrings = str.get_strings([{key: 'distributesectiontime', component: 'quizaccess_quiztimer'},\n                                             {key: 'sectiontime', component: 'quizaccess_quiztimer'},\n                                             {key: 'questiontime', component: 'quizaccess_quiztimer'},]);\n    const unitsstrings = str.get_strings([{key: 'seconds', component: 'quizaccess_quiztimer'},\n                                             {key: 'minutes', component: 'quizaccess_quiztimer'},\n                                             {key: 'hours', component: 'quizaccess_quiztimer'},]);\n    /**\n     * When a key is pressed, editing a question time,\n     * checks what it should do, and displays the question\n     * edit, removing the input of time edit.\n     * If necesary, inserts the time of the question in the db.\n     * \n     * @param {event} e\n     */\n    const questiontime = function(e) {\n        target = e.currentTarget;\n        if (e.key === 'Enter') {\n            timevalue = target.value\n            target.value = timevalue.replace(/[^0-9].*$/,'');\n            timevalue = target.value\n            timedisplay = target.closest('.time').querySelector('.question-time')\n            timedisplay.innerHTML = timevalue\n            if (timevalue == '') {\n                timedisplay.innerHTML = 0; \n            }\n            timedisplay.removeAttribute('style')\n            \n            timeid = timedisplay.getAttribute('id') + '-edit';\n            $('#' + timeid).remove();\n            set_question_time_call(timedisplay);\n            let timetype = document.querySelector('input[name=\"timetype\"]') \n            display_quiz_time(timetype.value);\n\n        } else if (e.key === 'Escape') {\n            timedisplay = target.closest('.time').querySelector('.question-time')\n            timedisplay.removeAttribute('style')\n            this.remove()\n        }\n    }\n\n    /**\n     * When a key is pressed, editing a section time,\n     * checks what it should do, and displays the section\n     * edit, removing the input of time edit.\n     * If necesary, inserts the time of the section in the db.\n     * \n     * @param {event} e\n     */\n    const sectiontime = function(e) {\n        target = e.currentTarget;\n        if (e.key === 'Enter') {\n            target.value = target.value.replace(/[^0-9].*$/,'');\n            timevalue = target.value\n            timedisplay = target.closest('.section-heading').querySelector('.section-time')\n            timedisplay.innerHTML = timevalue\n            if(timevalue == '') {\n                timedisplay.innerHTML = 0;\n                notification.addNotification({\n                    message: \"Tiempo introducido invalido, se ha restablecido al valor anterior\",\n                    type: \"error\"\n                 });\n                window.scrollTo({ top: 0, behavior: 'smooth' })\n            } else if (timevalue == 0) {\n                notification.addNotification({\n                    message: \"Tiempo introducido invalido, se ha restablecido al valor anterior\",\n                    type: \"error\"\n                 });\n                window.scrollTo({ top: 0, behavior: 'smooth' })\n            }\n            timedisplay.removeAttribute('style')\n            timeid = timedisplay.getAttribute('id') + '-edit';\n            $('#' + timeid).remove();\n            timedata = get_section_time_from_slots(timedisplay.closest('.section-heading'));\n            set_section_time_call(timedisplay.closest('.section.main.clearfix'),\n                parseFloat(timedata.unit), parseFloat(timedata.value));\n            let timetype = document.querySelector('input[name=\"timetype\"]') \n            display_quiz_time(timetype.value);\n\n        } else if (e.key === 'Escape') {\n            timedisplay = target.closest('.section-heading').querySelector('.section-time')\n            timedisplay.removeAttribute('style')\n            this.remove()\n        }\n    }\n\n    /**\n     * Adjust the question time to display, when a new\n     * unit time is selected, checking beforehand if \n     * the unit is valid.\n     * \n     * @param {event} e \n     */\n    const adjust_question_time_display = function (e) {\n        selectedoption = e.currentTarget;\n        value = selectedoption.value;\n        timedata = get_question_time(selectedoption.closest('.slot'));\n        let value = parseFloat(timedata.value);\n        if (timedata.value !== '0' && !isNaN(timedata.value)) {\n            selectedoption.options[0].setAttribute('disabled', 'true');\n            set_question_time_call(selectedoption);\n            let timetype = document.querySelector('input[name=\"timetype\"]')\n            display_quiz_time(timetype.value);\n        }\n    }\n\n    /**\n     * Adjust the section time to display, when a new\n     * unit time is selected, checking beforehand if\n     * the unit is valid.\n     * \n     * @param {event} e\n     */\n    const adjust_section_time_display = function (e) {\n        selectedoption = e.currentTarget;\n        section = selectedoption.closest('.section.main.clearfix');\n        unit = selectedoption.value;\n        value = parseFloat(section.querySelector('.section-time').innerHTML);\n        console.log(unit,value);\n        if ((value !== 0 && !isNaN(value)) && (unit !== '0' && !isNaN(unit))) {\n            selectedoption.options[0].setAttribute('disabled', 'true');\n            unit = parseFloat(section.querySelector('.time-select').options[unit].value);\n            value = parseFloat(section.querySelector('.section-time').innerHTML);\n            set_section_time_call(section, unit, value);\n            let timetype = document.querySelector('input[name=\"timetype\"]')\n            display_quiz_time(timetype.value);\n        }\n    }\n\n    /**\n     * Gets a question time from the page inputs.\n     * \n     * @param {event} question.\n     * @returns JSON string containing the question time.\n     */\n        const get_question_time = function(question) {\n            unit = question.querySelector('.time-select').value\n            timevalue = question.querySelector('.question-time').innerHTML\n            timevalue = get_time_in_seconds(parseFloat(unit), parseFloat(timevalue));\n            return {'unit' : unit, 'value' : timevalue}\n        }\n\n    /**\n     * Gets a section time from the slots time.\n     * \n     * @param {event} section\n     * @returns JSON string containing the secton time.\n     */\n    const get_section_time_from_slots = function(section) {\n        unit = section.querySelector('.time-select').value\n        timevalue = section.querySelector('.section-time').innerHTML\n        return { 'unit' : unit ,'value' : timevalue}\n    }\n\n    /**\n     * Gets the id of a section.\n     * \n     * @param {htmlElement} section\n     * @returns JSON string with the section id\n     */\n    const get_section_id = function(section) {\n        id = section.id\n        sectionid = id.substring(id.indexOf('-') + 1);\n        return { 'sectionid':sectionid}\n    }\n    /**\n     * Gets the id of a question\n     * \n     * @param {htmlElement} question\n     * @returns JSON string containing the numeric part of the question id.\n     */\n    const get_question_id = function(question) {\n        id = question.id\n        slotid = id.substring(id.indexOf('-') + 1);\n        return { 'questionid':slotid}\n    }\n\n    /**\n     * When the edit question event is triggered,\n     * creates a input for editing the time, and hides\n     * the display time.\n     * Also assigns events when a key is pressed on the newly\n     * created input, aswell as a blur event.\n     * \n     * @param {event} e\n     */\n    const edit_question_time = function(e) {\n        time = e.currentTarget.closest('.time')\n        timevalue = time.querySelector('.question-time')\n        timeid = timevalue.getAttribute('id') + '-edit';\n        $('<input></input>')\n            .attr({\n                'type': 'text',\n                'name': 'time',\n                'id': timeid,\n                'size': '5',\n                'value': timevalue.innerHTML\n            })\n            .prependTo(time);\n        timevalue.setAttribute('style', 'display:none')\n        $('#' + timeid).focus();\n        $('#' + timeid).on('keydown', this, questiontime)\n        $('#' + timeid).on('blur', this, function() {\n            this.closest('.time').querySelector('.question-time').removeAttribute('style')\n            this.remove();\n        })\n\n    }\n    /**\n     * When the edit section event is triggered,\n     * creates a input for editing the time, and hides\n     * the display time.\n     * Also assigns events when a key is pressed on the newly\n     * created input, aswell as a blur event.\n     * \n     * @param {event} e\n     */\n    const edit_section_time = function(e) {\n        time = e.currentTarget.closest('.time')\n        timevalue = time.querySelector('.section-time')\n        timeid = timevalue.getAttribute('id') + '-edit'\n        $('<input></input>')\n            .attr({\n                'type': 'text',\n                'name': 'time',\n                'id': timeid,\n                'size': '5',\n                'value': timevalue.innerHTML,\n            })\n            .prependTo(time);\n        timevalue.setAttribute('style', 'display:none')\n        $('#' + timeid).focus();\n        $('#' + timeid).on('keydown', this, sectiontime)\n        $('#' + timeid).on('blur', this, function() {\n            this.closest('.section-heading').querySelector('.section-time').removeAttribute('style')\n            this.remove();\n\n        })\n    }\n\n    /**\n     * Triggered at changing the edit format used,\n     * sets a new url based on the option picked,\n     * then it redirects the user to the new url.\n     * \n     * @param {event} e\n     */\n    const change_time_edit_method = function(e) {\n        editmethod = e.currentTarget.value;\n        let url = location.href;\n        let k = url.search('&edittype=');\n        if (k != -1) {\n            let param = url.substring(k);\n            let editmethod2 = param.split('=')[1]\n            url = url.replace(editmethod2, editmethod);\n        } else {\n            url += '&edittype=' + editmethod;\n        }\n        url = url.replace('#', '');\n        get_quiz_id(cmid).then( response => {\n            quizid = JSON.parse(response).quizid;\n            repaginate_slots(quizid,editmethod).then(r => {\n                window.location.href = url;\n            });\n        });\n\n    }\n\n    /**\n     * Loads a section time based on the questions times\n     * of the section, and their unit selected.\n     * \n     * @param {htmlElement} section\n     * \n     */\n    const load_section_time = (section) => {\n        questions = section.querySelectorAll('.slot')\n        totaltime = get_total_time_of_questions(questions);\n        sectiontimeunit = parseFloat(section.querySelector('.time-select').value);\n        totaltime = (get_time_in_unit(sectiontimeunit, totaltime));\n        section.querySelector('.total-section-time').innerHTML = totaltime;\n        if (parseFloat(section.querySelector('.time-select').value) === 0) {\n            section.querySelector('.total-section-unit').value = 1;\n        }\n        sectiontimeunit = section.querySelector('.time-select').options[sectiontimeunit].innerHTML;\n        section.querySelector('.total-section-unit').innerHTML = sectiontimeunit;\n    }\n\n    const repaginate_slots = (quizid, editmethod) => ajax.call([{\n        methodname: 'quizaccess_quiztimer_repaginate_slots',\n        args: {\n            quizid,\n            editmethod,\n        },\n    }])[0].done( response => {\n        return response;\n    }).fail( err => {\n        console.log(err);\n    });\n\n    /**\n     * Sets a section time with an ajax call, saving the time\n     * information on the sections db.\n     * \n     * @param {htmlElement} section\n     * @param {int} unit\n     * @param {int} value\n     */\n    const set_section_time_call = (section, unit, value) => {\n        console.log(unit, value)\n        questions = section.querySelectorAll('.slot');\n        value = get_time_in_seconds(unit, value);\n        timedata = {'unit' : unit, 'value' : value};\n        console.log(timedata)\n            get_quiz_id(cmid).then( response => {\n                quizid = JSON.parse(response).quizid;\n                let sectionid = get_section_id(section).sectionid;\n                set_section_time(quizid, sectionid, timedata).then(response => {\n                    get_section_time_call(section);\n                })\n        });\n    }\n\n    /**\n     * Gets a section time from the db\n     * if the section dont have a time, sets it\n     * visually to 0 and no unit, without inserting in db.\n     * \n     * @param {htmlElement} section\n     */\n    const get_section_time_call = (section) => {\n        get_quiz_id(cmid).then( response => {\n            let quizid = JSON.parse(response).quizid;\n            let sectionid = get_section_id(section).sectionid;\n            get_section_time(quizid, sectionid).then(response => {\n                timedata = JSON.parse(response);\n                if(!timedata) {\n                section.querySelector('.time-select').value = 2;\n                section.querySelector('.total-section-time').innerHTML = '';\n                section.querySelector('.total-section-unit').innerHTML = '';\n                section.querySelector('.section-time').innerHTML = 0;\n                }\n                unit = timedata.timeunit;\n                value = get_time_in_unit(parseFloat(unit), parseFloat(timedata.timevalue));\n                if (value === 0) {\n                    section.querySelector('.time-select').value = 2\n                } else {\n                    section.querySelector('.time-select').value = unit\n                }\n                section.querySelector('.total-section-time').innerHTML = value;\n                section.querySelector('.total-section-unit').innerHTML = section.querySelector('.time-select').options[unit].text;\n                section.querySelector('.section-time').innerHTML = value;\n            });\n        });\n    }\n\n    /**\n     * Gets the total amount of time of the selected questions\n     * and returns it in seconds.\n     * \n     * @param {array} questions \n     * @returns int total questions time in seconds.\n     */\n    const get_total_time_of_questions = (questions) => {\n        totaltime = 0;\n        for(let t = 0; t < questions.length; t ++) {\n            timeunit = parseInt(questions[t].querySelector('.time-select').value);\n            time = parseFloat(questions[t].querySelector('.question-time').innerHTML);\n            timeinseconds = get_time_in_seconds(timeunit, time);\n            totaltime += timeinseconds;\n        }\n        return totaltime;\n    }\n\n\n    /**\n     * Given a page, if it exist, updates the displayed time\n     * else creates the page elements for time control. \n     * \n     * @param {htmlElement} page \n     */\n    const load_page_time = (page) => {\n        \n        if (pagetime = page.querySelector('.pagetime')) {\n            let time = pagetime.querySelector('.total-page-time');\n            let unit = pagetime.querySelector('.total-page-unit');\n            id = page.getAttribute('id');\n            let question = $(page).nextUntil('.pagenumber.activity.timed')\n            totaltime = get_total_time_of_questions(question);\n            pagetimeunit = parseFloat(question[0].querySelector('.time-select').value);\n            totaltime = (get_time_in_unit(pagetimeunit, totaltime));\n            time.innerHTML = totaltime;\n            unit.innerHTML = question[0].querySelector('.time-select').options[pagetimeunit].innerHTML;\n        } else {\n            create_timed_page_elements(page);\n        }\n    }\n\n    /**\n     * Generates all the html elements to edit a page time[TODO],\n     * the time of the page, based on the containing slot,\n     * aswell as assign them the properties to modify the time.\n     * \n     * @param {htmlElement} page \n     */\n    const create_timed_page_elements = (page) => {\n        id = page.getAttribute('id');\n        let question = $('#' + id).nextUntil('.pagenumber.activity.timed')\n        totaltime = get_total_time_of_questions(question);\n        pagetimeunit = parseFloat(question[0].querySelector('.time-select').value);\n        totaltime = (get_time_in_unit(pagetimeunit, totaltime));\n        let pagetime = document.createElement('span')\n        pagetime.setAttribute('class', 'pagetime')\n        page.append(pagetime);\n\n        let pagevalue = document.createElement('span')\n        pagevalue.setAttribute('class', 'total-page-time')\n        pagevalue.innerHTML = totaltime\n        pagetime.append(pagevalue)\n        \n        let pageunit = document.createElement('span')\n        pageunit.setAttribute('class', 'total-page-unit')\n        pageunit.innerHTML = question[0].querySelector('.time-select').options[pagetimeunit].innerHTML;\n        pagetime.append(pageunit)\n    }\n\n    /**\n     * Loads tbe page time \n     * \n     * @param {htmlElement} page\n     */\n    var pageloadedsections = [];\n    const get_page_time_from_section = (page) => {\n        let section = page.closest('.section.main.clearfix');\n        if (!pageloadedsections.includes(section.id)) {\n            pageloadedsections.push(section.id);\n            let sectionpages = section.querySelectorAll('.pagenumber');\n            let sectionid = get_section_id(section).sectionid;\n            get_quiz_id(cmid).then( response => {\n                let quizid = JSON.parse(response).quizid;\n                get_section_time(quizid, sectionid).then( response => {\n                        let totalsectime = JSON.parse(response).timevalue;\n                        let pagetime = totalsectime / sectionpages.length; \n                        $.when(unitsstrings).done( unitsstrings => {\n                            pagetime = format_pagetime(pagetime, unitsstrings[0], unitsstrings[1], unitsstrings[2]);\n                            for (let t = 0; t < sectionpages.length; t ++) {\n                                sectionpages[t].querySelector('.total-page-time').innerHTML = pagetime;\n                            }\n                        });\n                });\n            });\n\n        }\n\n    }\n\n    /**\n     * Formats the time in seconds, and gets a \n     * string to display the units using moodle lang strings.\n     * \n     * @param {int} time \n     * @param {string} seconds \n     * @param {string} minutes \n     * @param {string} hours \n     * @returns {string} formatted time\n     */\n    const format_pagetime = (time, seconds, minutes, hours) => {\n        if (time / 3600 >= 1) {\n            let h = Math.floor(time / 3600);\n            if (time % 3600 !== 0) {\n                if (time % 3600 > 60) {\n                    if ((time % 3600) % 60 !== 0 ) {\n                        let m = Math.floor((time % 3600) / 60);\n                        let s = (time % 3600) % 60;\n                        pagetime = h + ' ' + hours + ' ' + m + ' ' + minutes + ' ' + s + ' ' + seconds;\n                        console.log(pagetime);\n                        return pagetime;\n                    }\n                    let m = (time % 3600) / 60;\n                    pagetime = h + ' ' + hours + ' ' + m + ' ' + minutes;\n                    console.log(pagetime);\n                    return pagetime;\n                }\n                let s = (time % 3600);\n                pagetime = h + ' ' + hours + ' ' + s + ' ' + seconds;\n                console.log(pagetime);\n                return pagetime;\n            }\n            pagetime = h + ' ' + hours;\n            console.log(pagetime);\n            return pagetime;\n        } else if (time / 60 >= 1) {\n            let m = Math.floor(time / 60);\n            if (time % 60 !== 0) {\n                let s = +(time % 60).toFixed(2);\n                pagetime = m + ' ' + minutes + ' ' + s + ' ' + seconds;\n                console.log(pagetime);\n                return pagetime;\n            }\n            pagetime = m + ' ' + minutes;\n            console.log(pagetime);\n            return pagetime;\n        } else {\n            pagetime = +time.toFixed(2) + ' ' + seconds;\n            console.log(pagetime);\n            return pagetime;\n        }\n    }\n\n    /**\n     * Gets the time to set in seconds for the insert\n     * in the database.\n     * \n     * @param {int} timeunit\n     * @param {int} time\n     * @returns the time to insert in the database.\n     */\n    const get_time_in_seconds = (timeunit, time) => {\n        switch (timeunit) {\n            case 1:\n                timeinseconds = time;\n                break;\n            case 2:\n                timeinseconds = time * 60;\n                break;\n            case 3:\n                timeinseconds = time * 3600;\n                break\n            default:\n                timeinseconds = 0;\n                break;\n\n        }\n        return timeinseconds;\n    }\n\n    /**\n     * Gets the time in the unit requested\n     * to show.\n     * \n     * @param {int} timeunit\n     * @param {int} time\n     * @returns the time in the selected unit.\n     */\n    const get_time_in_unit = (timeunit, time) => {\n        switch (timeunit) {\n            case 1:\n                sectiontimeinunit = time;\n                break;\n            case 2:\n                sectiontimeinunit = time / 60;\n                break;\n            case 3:\n                sectiontimeinunit = time / 3600;\n                break\n            default:\n                sectiontimeinunit = 0;\n                break;\n\n        }\n        return parseFloat(sectiontimeinunit.toFixed(2));\n    }\n\n    /**\n     * Displays and updates the total quiz time.\n     * \n     * @param {string} timetype\n     */\n    const display_quiz_time = (timetype) => {\n        let quiztimer = document.querySelector('.quiztimer-time');\n        console.log(quiztimer.innerHTML);\n        $.when(unitsstrings).done( unitsstrings => {\n            get_quiz_id(cmid).then( response => {\n                quizid = JSON.parse(response).quizid;\n                console.log(quizid, timetype);\n                get_quiz_time(quizid, timetype).then( r => {\n                    let time = format_pagetime(JSON.parse(r).time,unitsstrings[0], unitsstrings[1], unitsstrings[2]);\n                    quiztimer.innerHTML == '' ? quiztimer.append(' | ' + time) :\n                    quiztimer.innerHTML = ' | ' + time;\n                });\n            });\n        });\n\n    }\n\n    /**\n     * Returns the quiz time.\n     * \n     * @param {int} quizid\n     * @param {string} editmethod\n     * @returns\n     */\n    const get_quiz_time = (quizid, editmethod) => ajax.call([{\n        methodname: 'quizaccess_quiztimer_get_quiz_time',\n        args: {\n            quizid,\n            editmethod,\n        },\n    }])[0].done( response => {\n        return response;\n    }).fail( err => {\n        console.log(err);\n    });\n\n\n    /**\n     * Sets a section time with an ajax call, updating or inserting\n     * the section with the new timedata.\n     * \n     * @param {int} quizid\n     * @param {int} sectionid\n     * @param {JSON} timedata\n     * @returns JSON string with the modified section data in db.\n     */\n    const set_section_time = (quizid, sectionid, timedata) => ajax.call([{\n        methodname: 'quizaccess_quiztimer_set_section_time',\n        args: {\n            quizid,\n            sectionid,\n            timedata: JSON.stringify(timedata),\n        },\n    }])[0].done( response => {\n        return response;\n    }).fail( err => {\n        console.log(err);\n    });\n\n    /**\n     * Gets a section time info\n     * with an ajax call to the sections time db.\n     * \n     * @param {int} quizid\n     * @param {int} sectionid\n     * @returns JSON string with the section time.\n     */\n    const get_section_time = (quizid, sectionid) => ajax.call([{\n        methodname: 'quizaccess_quiztimer_get_section_time',\n        args: {\n            quizid,\n            sectionid,\n        },\n    }])[0].done( response => {\n        return response;\n    }).fail( err => {\n        console.log(err);\n    });\n\n    /**\n     * Calls the ajax function to set a slot time and\n     * updates the page and section time display to reflect\n     * their time adjusted with the new question time set.\n     * \n     * @param {htmlElement} slot\n     * @returns JSON string with the modified slot info.\n     */\n    const set_question_time_call = (slot) => {\n        timedata = get_question_time(slot.closest('.slot'));\n            if (timedata.unit != 0) {\n                question = slot.closest('[id^=\"slot\"]');\n                questionid = get_question_id(question);\n                get_quiz_id(cmid).then( response => {\n                    quizid = JSON.parse(response);\n                    set_question_time(quizid.quizid, questionid.questionid, timedata).then(response => {\n                        page = get_page_from_slotid(JSON.parse(response).slot);\n                        load_page_time(page);\n                        load_section_time(question.closest('.section.main.clearfix'));\n                    })\n                });\n\n            }\n    }\n    /**\n     * \n     * @param {int} quizid\n     * @param {int} questionid\n     * @param {array} timedata\n     * @returns response with the modified slot information.\n     */\n    const set_question_time = (quizid, questionid, timedata) => ajax.call([{\n        methodname: 'quizaccess_quiztimer_set_question_time',\n        args: {\n            quizid,\n            questionid,\n            timedata: JSON.stringify(timedata),\n        },\n    }])[0].done( response => {\n        return response;\n    }).fail( err => {\n        console.log(err);\n    });\n\n    /**\n     * \n     * @param {int} cmid\n     * @returns ajax response with the quizid\n     */\n    const get_quiz_id = (cmid) => ajax.call([{\n        methodname: 'quizaccess_quiztimer_get_quiz_id',\n        args: {\n            cmid,\n        },\n    }])[0].done(function(response) {\n        return response;\n    }).fail(function(err) {\n        console.log(err);\n    });\n\n    /**\n     * \n     * @param {int} questionid\n     * @param {array} timedata\n     * @returns\n     */\n    const load_question_time = (questionid) => ajax.call([{\n        methodname: 'quizaccess_quiztimer_get_question_time',\n        args: {\n            questionid,\n        },\n    }])[0].done( response => {\n        return response;\n    }).fail( err => {\n        console.log(err);\n    });\n\n    /**\n     * \n     * @param {htmlElement} slot\n     * @returns the page the slot belongs to.\n     */\n    const get_page_from_slotid = (slot) => {\n        console.log(slot);\n        slotid = 'slot-' + slot;\n        page = ($('#' + slotid).prev('.pagenumber.timed')[0]);\n        return(page);\n    }\n\n    return {\n        init: function(timetype = 'section') {\n            $(document).ready(function() {\n                navitem = $('.activity-header')[0];\n\n                $.when(selectstrings).done( selectstrings => {\n                    let select = document.createElement('select');\n                    select.setAttribute('class', 'custom-select urlselect timeselect');\n                    select.add(new Option(selectstrings[0], 'equitative'));\n                    select.add(new Option(selectstrings[1], 'section'));\n                    select.add(new Option(selectstrings[2], 'slots'));\n                    navitem.append(select);\n                    if (select.options[0].value == timetype) {\n                        selectedoption = 0;\n                    } else if (select.options[1].value == timetype) {\n                        selectedoption = 1;\n                    } else {\n                        selectedoption = 2;\n                    }\n                    select.options[selectedoption].setAttribute('selected', 'true');\n                    select.addEventListener('change', change_time_edit_method, true);\n                })\n                let quiztime = document.createElement('span');\n                quiztime.setAttribute('class', 'quiztimer-time');\n                let slotheader = document.querySelector('.mod-quiz-edit-content').querySelector('h2');\n                slotheader.append(quiztime);\n                display_quiz_time(timetype);\n                let secrettimetype = document.createElement('input');\n                secrettimetype.setAttribute(\"type\", \"hidden\");\n                secrettimetype.setAttribute(\"name\", \"timetype\");\n                secrettimetype.setAttribute(\"value\", timetype);\n                slotheader.append(secrettimetype);\n\n                questions = $('.slot');\n                if (questions.length === 0) {\n                    section = $('.section.main.clearfix')[0];\n                    section.setAttribute('style', 'display:none');\n                    notification.addNotification({\n                       message: \"No se encontraron preguntas, comprueba que se han añadido correctamente al quiz.\",\n                       type: \"error\"\n                    });\n                    $('.slots')[0].append('Preguntas:0 | Este cuestionario está vacio');\n                    return;\n                }\n                pagesar = [];\n                for (let x = 0; x < questions.length; x ++) {\n                    let question = questions[x];\n                    let select = question.querySelector('.time-select')\n\n                    select.addEventListener('change', adjust_question_time_display, true);\n\n                    editpen = question.querySelector('.editing-question-time')\n                    editpen.addEventListener('click', edit_question_time, true)\n\n                    questionid = get_question_id(question);\n                    let timeinput = question.querySelector('.question-time');\n                    load_question_time(questionid.questionid).then(function (response) {\n                        if (timetype === 'section') {\n                            question.querySelector('.time').setAttribute('style', 'display:none');\n                            select.setAttribute('style', 'display:none');\n                        } else if (timetype === 'slots') {\n                            if (timedata = JSON.parse(response) || JSON.parse(response).timevalue == 0) {\n                                select.value = timedata.timeunit;\n                                timeinput.innerHTML = get_time_in_unit(parseFloat(timedata.timeunit), parseFloat(timedata.timevalue));\n                                console.log(timedata);\n                            } else {\n                                select.value = 2;\n                                timeinput.innerHTML = 0;\n                            }\n                            pages = $('.pagenumber.activity.timed')\n                            for (let t = 0; t < pages.length; t ++) {\n                                let page = pages[t];\n                                if (!pagesar.includes(page.id)) {\n                                    pagesar.push(page.id);\n                                }\n                                load_page_time(page);\n                            }\n                            let section = question.closest('.section.main.clearfix');\n                            section.querySelector('.time-select').options[2].setAttribute('selected', true);\n                            section.querySelector('.time-select').setAttribute('style', 'display:none');\n                            section.querySelector('.time').setAttribute('style', 'display:none');\n                            load_section_time(section);\n                            section.querySelector('.section-time').innerHTML = section.querySelector('.total-section-time').innerHTML\n                        } else if (timetype === 'equitative') {\n\n                            question.querySelector('.time').setAttribute('style', 'display:none');\n                            select.setAttribute('style', 'display:none');\n                            pages = $('.pagenumber.activity.timed')\n                            for (let t = 0; t < pages.length; t ++) {\n                                let page = pages[t];\n                                if (!pagesar.includes(page.id)) {\n                                    pagesar.push(page.id);\n                                    load_page_time(page, false);\n                                    get_page_time_from_section(page);\n                                }\n                            }\n                        }\n\n                    });\n\n                }\n                sections = $('.section.main.clearfix');\n                for (let x = 0; x < sections.length; x ++) {\n                    let section = sections[x];\n                    select = section.querySelector('.time-select')\n                    select.addEventListener('change', adjust_section_time_display, true);\n\n                    editpen = section.querySelector('.editing-section-time')\n                    editpen.addEventListener('click', edit_section_time, true)\n                    if (timetype !== 'slots') {\n                        get_section_time_call(section.closest('.section.main.clearfix'));\n                    }\n                }\n            });\n        },\n    };\n});\n"],"names":["define","$","ajax","notification","str","cmid","URLSearchParams","window","location","search","get","selectstrings","get_strings","key","component","unitsstrings","questiontime","e","target","currentTarget","timevalue","value","replace","timedisplay","closest","querySelector","innerHTML","removeAttribute","timeid","getAttribute","remove","set_question_time_call","timetype","document","display_quiz_time","sectiontime","addNotification","message","type","scrollTo","top","behavior","timedata","get_section_time_from_slots","set_section_time_call","parseFloat","unit","adjust_question_time_display","selectedoption","get_question_time","isNaN","options","setAttribute","adjust_section_time_display","section","console","log","question","get_time_in_seconds","get_section_id","id","sectionid","substring","indexOf","get_question_id","slotid","edit_question_time","time","attr","prependTo","focus","on","this","edit_section_time","change_time_edit_method","editmethod","url","href","k","editmethod2","split","get_quiz_id","then","response","quizid","JSON","parse","repaginate_slots","r","load_section_time","questions","querySelectorAll","totaltime","get_total_time_of_questions","sectiontimeunit","get_time_in_unit","call","methodname","args","done","fail","err","set_section_time","get_section_time_call","get_section_time","timeunit","text","t","length","parseInt","timeinseconds","load_page_time","page","pagetime","nextUntil","pagetimeunit","create_timed_page_elements","createElement","append","pagevalue","pageunit","pageloadedsections","get_page_time_from_section","includes","push","sectionpages","when","format_pagetime","seconds","minutes","hours","h","Math","floor","m","s","toFixed","sectiontimeinunit","quiztimer","get_quiz_time","stringify","slot","questionid","set_question_time","get_page_from_slotid","load_question_time","prev","init","ready","navitem","select","add","Option","addEventListener","quiztime","slotheader","secrettimetype","pagesar","x","editpen","timeinput","pages","sections"],"mappings":"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"}