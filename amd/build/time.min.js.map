{"version":3,"file":"time.min.js","sources":["../src/time.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n/**\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine(['jquery', 'core/ajax', 'core/notification', 'core/str'], function($, ajax, notification, str) {\n\n    const urlparams = new URLSearchParams(window.location.search);\n    const cmid = urlparams.get('cmid');\n\n    const selectstrings = str.get_strings([{key: 'sectiontime', component: 'quizaccess_quiztimer'},\n                                             {key: 'questiontime', component: 'quizaccess_quiztimer'},\n                                             {key: 'distributesectiontime', component: 'quizaccess_quiztimer'},\n                                             {key: 'timelimitedit', component: 'quizaccess_quiztimer'},]);\n    const unitsstrings = str.get_strings([{key: 'seconds', component: 'quizaccess_quiztimer'},\n                                             {key: 'minutes', component: 'quizaccess_quiztimer'},\n                                             {key: 'hours', component: 'quizaccess_quiztimer'},]);\n    const repaginatewarning = str.get_string('repaginatewarning', 'quizaccess_quiztimer');\n    /**\n     * When a key is pressed, editing a question time,\n     * checks what it should do, and displays the question\n     * edit, removing the input of time edit.\n     * If necesary, inserts the time of the question in the db.\n     *\n     * @param {event} e\n     */\n    const questiontime = async function(e) {\n        const invalidsettedtime = await str.get_string('invalidsettedtime', 'quizaccess_quiztimer');\n        let target = e.currentTarget;\n        if (e.key === 'Enter') {\n            let timevalue = target.value;\n            target.value = timevalue.replace(/[^0-9].*$/,'');\n            timevalue = target.value;\n            let timedisplay = target.closest('.time').querySelector('.question-time');\n            if(timevalue == '') {\n                notification.addNotification({\n                    message: invalidsettedtime,\n                    type: \"error\"\n                 });\n                window.scrollTo({ top: 0, behavior: 'smooth' });\n            } else if (timevalue == 0) {\n                notification.addNotification({\n                    message: invalidsettedtime,\n                    type: \"error\"\n                 });\n                window.scrollTo({ top: 0, behavior: 'smooth' });\n            } else {\n                timedisplay.innerHTML = timevalue;\n            }\n            timedisplay.removeAttribute('style');\n\n            let timeid = timedisplay.getAttribute('id') + '-edit';\n            $('#' + timeid).remove();\n            set_question_time_call(timedisplay);\n        } else if (e.key === 'Escape') {\n            let timedisplay = target.closest('.time').querySelector('.question-time');\n            timedisplay.removeAttribute('style');\n            this.remove();\n        }\n    };\n\n    /**\n     * When a key is pressed, editing a section time,\n     * checks what it should do, and displays the section\n     * edit, removing the input of time edit.\n     * If necesary, inserts the time of the section in the db.\n     *\n     * @param {event} e\n     */\n    const sectiontime = async function(e) {\n        const invalidsettedtime = await str.get_string('invalidsettedtime', 'quizaccess_quiztimer');\n        let target = e.currentTarget;\n        if (e.key === 'Enter') {\n            target.value = target.value.replace(/[^0-9].*$/,'');\n            let timevalue = target.value;\n            let timedisplay = target.closest('.section-heading').querySelector('.section-time');\n            timedisplay.innerHTML = timevalue;\n            if(timevalue == '') {\n                timedisplay.innerHTML = 0;\n                notification.addNotification({\n                    message: invalidsettedtime,\n                    type: \"error\"\n                 });\n                window.scrollTo({ top: 0, behavior: 'smooth' });\n            } else if (timevalue == 0) {\n                notification.addNotification({\n                    message: invalidsettedtime,\n                    type: \"error\"\n                 });\n                window.scrollTo({ top: 0, behavior: 'smooth' });\n            }\n            timedisplay.removeAttribute('style');\n            let timeid = timedisplay.getAttribute('id') + '-edit';\n            $('#' + timeid).remove();\n            let timedata = get_section_time_from_slots(timedisplay.closest('.section-heading'));\n            set_section_time_call(timedisplay.closest('.section.main.clearfix'),\n                parseFloat(timedata.unit), parseFloat(timedata.value));\n        } else if (e.key === 'Escape') {\n            let timedisplay = target.closest('.section-heading').querySelector('.section-time');\n            timedisplay.removeAttribute('style');\n            this.remove();\n        }\n    };\n\n    /**\n     * Adjust the question time to display, when a new\n     * unit time is selected, checking beforehand if\n     * the unit is valid.\n     *\n     * @param {event} e\n     */\n    const adjust_question_time_display = function (e) {\n        let selectedoption = e.currentTarget;\n        value = selectedoption.value;\n        let timedata = get_question_time(selectedoption.closest('.slot'));\n        let value = parseFloat(timedata.value);\n        if (value !== 0 && !isNaN(value)) {\n            selectedoption.options[0].setAttribute('disabled', 'true');\n            set_question_time_call(selectedoption);\n        }\n    };\n\n    /**\n     * Adjust the section time to display, when a new\n     * unit time is selected, checking beforehand if\n     * the unit is valid.\n     *\n     * @param {event} e\n     */\n    const adjust_section_time_display = function (e) {\n        let selectedoption = e.currentTarget;\n        let section = selectedoption.closest('.section.main.clearfix');\n        let unit = selectedoption.value;\n        let value = parseFloat(section.querySelector('.section-time').innerHTML);\n        if ((value !== 0 && !isNaN(value)) && (unit !== '0' && !isNaN(unit))) {\n            selectedoption.options[0].setAttribute('disabled', 'true');\n            unit = parseFloat(section.querySelector('.time-select').options[unit].value);\n            set_section_time_call(section, unit, value);\n        }\n    };\n\n    /**\n     * Gets a question time from the page inputs.\n     *\n     * @param {event} question\n     * @returns JSON string containing the question time.\n     */\n        const get_question_time = function(question) {\n            let unit = question.querySelector('.time-select').value;\n            let timevalue = question.querySelector('.question-time').innerHTML;\n            timevalue = get_time_in_seconds(parseFloat(unit), parseFloat(timevalue));\n            return {'unit' : unit, 'value' : timevalue};\n        };\n\n    /**\n     * Gets a section time from the slots time.\n     *\n     * @param {event} section\n     * @returns JSON string containing the secton time.\n     */\n    const get_section_time_from_slots = function(section) {\n        let unit = section.querySelector('.time-select').value;\n        let timevalue = section.querySelector('.section-time').innerHTML;\n        return { 'unit' : unit ,'value' : timevalue};\n    };\n\n    /**\n     * Gets the id of a section.\n     *\n     * @param {htmlElement} section\n     * @returns JSON string with the section id\n     */\n    const get_section_id = function(section) {\n        let id = section.id;\n        let sectionid = id.substring(id.indexOf('-') + 1);\n        return { 'sectionid':sectionid};\n    };\n    /**\n     * Gets the id of a question\n     *\n     * @param {htmlElement} question\n     * @returns JSON string containing the numeric part of the question id.\n     */\n    const get_question_id = function(question) {\n        let id = question.id;\n        let slotid = id.substring(id.indexOf('-') + 1);\n        return { 'questionid':slotid};\n    };\n\n    /**\n     * When the edit question event is triggered,\n     * creates a input for editing the time, and hides\n     * the display time.\n     * Also assigns events when a key is pressed on the newly\n     * created input, aswell as a blur event.\n     *\n     * @param {event} e\n     */\n    const edit_question_time = function(e) {\n        let time = e.currentTarget.closest('.time');\n        let timevalue = time.querySelector('.question-time');\n        let timeid = timevalue.getAttribute('id') + '-edit';\n        $('<input></input>')\n            .attr({\n                'type': 'text',\n                'name': 'time',\n                'id': timeid,\n                'size': '5',\n                'value': timevalue.innerHTML\n            })\n            .prependTo(time);\n        timevalue.setAttribute('style', 'display:none');\n        $('#' + timeid).focus();\n        $('#' + timeid).on('keydown', this, questiontime);\n        $('#' + timeid).on('blur', this, function() {\n            this.closest('.time').querySelector('.question-time').removeAttribute('style');\n            this.remove();\n        });\n    };\n\n    /**\n     * When the edit section event is triggered,\n     * creates a input for editing the time, and hides\n     * the display time.\n     * Also assigns events when a key is pressed on the newly\n     * created input, aswell as a blur event.\n     *\n     * @param {event} e\n     */\n    const edit_section_time = function(e) {\n        let time = e.currentTarget.closest('.time');\n        let timevalue = time.querySelector('.section-time');\n        let timeid = timevalue.getAttribute('id') + '-edit';\n        $('<input></input>')\n            .attr({\n                'type': 'text',\n                'name': 'time',\n                'id': timeid,\n                'size': '5',\n                'value': timevalue.innerHTML,\n            })\n            .prependTo(time);\n        timevalue.setAttribute('style', 'display:none');\n        $('#' + timeid).focus();\n        $('#' + timeid).on('keydown', this, sectiontime);\n        $('#' + timeid).on('blur', this, function() {\n            this.closest('.section-heading').querySelector('.section-time').removeAttribute('style');\n            this.remove();\n        });\n    };\n\n    /**\n     * Triggered at changing the edit format used,\n     * sets a new url based on the option picked,\n     * then it redirects the user to the new url.\n     *\n     * @param {event} e\n     */\n    const change_time_edit_method = function(e) {\n        $.when(repaginatewarning).done( repaginatestring => {\n            if (confirm(repaginatestring)) {\n                let editmethod = e.currentTarget.value;\n                let url = location.href;\n                let k = url.search('&edittype=');\n                if (k != -1) {\n                    let param = url.substring(k);\n                    let editmethod2 = param.split('=')[1];\n                    url = url.replace(editmethod2, editmethod);\n                } else {\n                    url += '&edittype=' + editmethod;\n                }\n                url = url.replace('#', '');\n                get_quiz_id(cmid).then(response => {\n                    let quizid = JSON.parse(response).quizid;\n                    repaginate_slots(quizid,editmethod).done( () => {\n                        window.location.href = url;\n                    });\n                });\n            }\n        });\n    };\n\n    /**\n     * Loads a section time based on the questions times\n     * of the section, and their unit selected.\n     *\n     * @param {htmlElement} section\n     *\n     */\n    const load_section_time = (section) => {\n        let questions = section.querySelectorAll('.slot');\n        let totaltime = get_total_time_of_questions(questions);\n        $.when(unitsstrings).done( unitsstrings => {\n            totaltime = format_pagetime(totaltime, unitsstrings[0], unitsstrings[1], unitsstrings[2]);\n        });\n        section.querySelector('.total-section-time').innerHTML = totaltime;\n        if (parseFloat(section.querySelector('.time-select').value) === 0) {\n            section.querySelector('.total-section-unit').value = 1;\n        }\n    };\n\n    const repaginate_slots = (quizid, editmethod) => ajax.call([{\n        methodname: 'quizaccess_quiztimer_repaginate_slots',\n        args: {\n            quizid,\n            editmethod,\n        },\n    }])[0].done( response => {\n        return response;\n    }).fail( err => {\n        // eslint-disable-next-line no-console\n        console.log(err);\n    });\n\n    /**\n     * Sets a section time with an ajax call, saving the time\n     * information on the sections db.\n     *\n     * @param {htmlElement} section\n     * @param {int} unit\n     * @param {int} value\n     */\n    const set_section_time_call = (section, unit, value) => {\n        value = get_time_in_seconds(unit, value);\n        let timedata = {'unit' : unit, 'value' : value};\n            get_quiz_id(cmid).then( response => {\n                let quizid = JSON.parse(response).quizid;\n                let sectionid = get_section_id(section).sectionid;\n                set_section_time(quizid, sectionid, timedata).then( () => {\n                    get_section_time_call(section);\n                    let timetype = document.querySelector('input[name=\"timetype\"]');\n                    if (timetype.value == 'equitative') {\n                        get_page_time_from_section(section);\n                    }\n                });\n        });\n    };\n\n    /**\n     * Gets a section time from the db\n     * if the section dont have a time, sets it\n     * visually to 0 and no unit, without inserting in db.\n     *\n     * @param {htmlElement} section\n     */\n    const get_section_time_call = async (section) => {\n        const warningtimestr = await str.get_string('warningtime', 'quizaccess_quiztimer');\n        get_quiz_id(cmid).then( response => {\n            let quizid = JSON.parse(response).quizid;\n            let sectionid = get_section_id(section).sectionid;\n            get_section_time(quizid, sectionid).then(response => {\n                let timedata = JSON.parse(response);\n                if(!timedata) {\n                    section.querySelector('.time-select').value = 2;\n                    section.querySelector('.total-section-time').innerHTML = '';\n                    section.querySelector('.total-section-unit').innerHTML = '';\n                    section.querySelector('.section-time').innerHTML = 0;\n                }\n                let unit = timedata.timeunit;\n                let value = get_time_in_unit(parseFloat(unit), parseFloat(timedata.timevalue));\n                if (value === 0) {\n                    section.querySelector('.time-select').value = 2;\n                    if (!section.querySelector('.warningtime')) {\n                        let warningtime = document.createElement('span');\n                        warningtime.setAttribute('class', 'text-danger warningtime');\n                        warningtime.append(warningtimestr);\n                        section.querySelector('.section-heading').appendChild(warningtime);\n                    }\n                } else {\n                    section.querySelector('.time-select').value = unit;\n                    if (section.querySelector('.warningtime')) {\n                        section.querySelector('.section-heading').removeChild(section.querySelector('.warningtime'));\n                    }\n                }\n                section.querySelector('.total-section-time').innerHTML = value;\n                section.querySelector('.total-section-unit').innerHTML = section.querySelector('.time-select').options[unit].text;\n                section.querySelector('.section-time').innerHTML = value;\n                display_quiz_time('section');\n                quiz_has_attemps();\n            });\n        });\n    };\n\n    /**\n     * Gets the total amount of time of the selected questions\n     * and returns it in seconds.\n     *\n     * @param {array} questions\n     * @returns int total questions time in seconds.\n     */\n    const get_total_time_of_questions = (questions) => {\n        let totaltime = 0;\n        for(let t = 0; t < questions.length; t ++) {\n            let timeunit = parseInt(questions[t].querySelector('.time-select').value);\n            let time = parseFloat(questions[t].querySelector('.question-time').innerHTML);\n            let timeinseconds = get_time_in_seconds(timeunit, time);\n            totaltime += timeinseconds;\n        }\n        return totaltime;\n    };\n\n\n    /**\n     * Given a page, if it exist, updates the displayed time\n     * else creates the page elements for time control.\n     *\n     * @param {htmlElement} page\n     */\n    const load_page_time = (page) => {\n\n        if (page.querySelector('.pagetime')) {\n            let pagetime = page.querySelector('.pagetime');\n            let time = pagetime.querySelector('.total-page-time');\n            let unit = pagetime.querySelector('.total-page-unit');\n            let question = $(page).nextUntil('.pagenumber.activity.timed');\n            let totaltime = get_total_time_of_questions(question);\n            let pagetimeunit = parseFloat(question[0].querySelector('.time-select').value);\n            totaltime = (get_time_in_unit(pagetimeunit, totaltime));\n            time.innerHTML = totaltime;\n            unit.innerHTML = question[0].querySelector('.time-select').options[pagetimeunit].innerHTML;\n        } else {\n            create_timed_page_elements(page);\n        }\n    };\n\n    /**\n     * Generates all the html elements to edit a page time[TODO],\n     * the time of the page, based on the containing slot,\n     * aswell as assign them the properties to modify the time.\n     *\n     * @param {htmlElement} page\n     */\n    const create_timed_page_elements = (page) => {\n        let id = page.getAttribute('id');\n        let question = $('#' + id).nextUntil('.pagenumber.activity.timed');\n        let totaltime = get_total_time_of_questions(question);\n        let pagetimeunit = parseFloat(question[0].querySelector('.time-select').value);\n        totaltime = (get_time_in_unit(pagetimeunit, totaltime));\n        let pagetime = document.createElement('span');\n        pagetime.setAttribute('class', 'pagetime');\n        page.append(pagetime);\n\n        let pagevalue = document.createElement('span');\n        pagevalue.setAttribute('class', 'total-page-time');\n        pagevalue.innerHTML = totaltime;\n        pagetime.append(pagevalue);\n\n        let pageunit = document.createElement('span');\n        pageunit.setAttribute('class', 'total-page-unit');\n        pagetime.append(' ');\n        pagetime.append(pageunit);\n    };\n\n    /**\n     * Loads tbe page time\n     *\n     * @param {htmlElement} page\n     */\n    const get_page_time_from_section = (page) => {\n        var pageloadedsections = [];\n        let section = page.closest('.section.main.clearfix');\n        if (!pageloadedsections.includes(section.id)) {\n            pageloadedsections.push(section.id);\n            let sectionpages = section.querySelectorAll('.pagenumber');\n            let sectionid = get_section_id(section).sectionid;\n            get_quiz_id(cmid).then( response => {\n                let quizid = JSON.parse(response).quizid;\n                get_section_time(quizid, sectionid).then( response => {\n                    let totalsectime = JSON.parse(response).timevalue;\n                    let pagetime = totalsectime / sectionpages.length;\n                    $.when(unitsstrings).done( unitsstrings => {\n                        pagetime = format_pagetime(pagetime, unitsstrings[0], unitsstrings[1], unitsstrings[2]);\n                        for (let t = 0; t < sectionpages.length; t ++) {\n                            sectionpages[t].querySelector('.total-page-time').innerHTML = pagetime;\n                        }\n                    });\n                });\n            });\n        }\n    };\n\n    /**\n     * Formats the time in seconds, and gets a\n     * string to display the units using moodle lang strings.\n     *\n     * @param {int} time\n     * @param {string} seconds\n     * @param {string} minutes\n     * @param {string} hours\n     * @returns {string} formatted time\n     */\n    const format_pagetime = (time, seconds, minutes, hours) => {\n        let pagetime = '';\n        if (time / 3600 >= 1) {\n            let h = Math.floor(time / 3600);\n            if (time % 3600 !== 0) {\n                if (time % 3600 >= 60) {\n                    if ((time % 3600) % 60 !== 0 ) {\n                        let m = Math.floor((time % 3600) / 60);\n                        let s = (time % 3600) % 60;\n                        pagetime = h + ' ' + hours + ' ' + m + ' ' + minutes + ' ' + s + ' ' + seconds;\n                        return pagetime;\n                    }\n                    let m = (time % 3600) / 60;\n                    pagetime = h + ' ' + hours + ' ' + m + ' ' + minutes;\n                    return pagetime;\n                }\n                let s = (time % 3600);\n                pagetime = h + ' ' + hours + ' ' + s + ' ' + seconds;\n                return pagetime;\n            }\n            pagetime = h + ' ' + hours;\n            return pagetime;\n        } else if (time / 60 >= 1) {\n            let m = Math.floor(time / 60);\n            if (time % 60 !== 0) {\n                let s = +(time % 60).toFixed(2);\n                pagetime = m + ' ' + minutes + ' ' + s + ' ' + seconds;\n                return pagetime;\n            }\n            pagetime = m + ' ' + minutes;\n            return pagetime;\n        } else {\n            pagetime = +time.toFixed(2) + ' ' + seconds;\n            return pagetime;\n        }\n    };\n\n    /**\n     * Gets the time to set in seconds for the insert\n     * in the database.\n     *\n     * @param {int} timeunit\n     * @param {int} time\n     * @returns the time to insert in the database.\n     */\n    const get_time_in_seconds = (timeunit, time) => {\n        let timeinseconds = 0;\n        switch (timeunit) {\n            case 1:\n                timeinseconds = time;\n                break;\n            case 2:\n                timeinseconds = time * 60;\n                break;\n            case 3:\n                timeinseconds = time * 3600;\n                break;\n            default:\n                timeinseconds = 0;\n                break;\n\n        }\n        return timeinseconds;\n    };\n\n    /**\n     * Gets the time in the unit requested\n     * to show.\n     *\n     * @param {int} timeunit\n     * @param {int} time\n     * @returns the time in the selected unit.\n     */\n    const get_time_in_unit = (timeunit, time) => {\n        let sectiontimeinunit = 0;\n        switch (timeunit) {\n            case 1:\n                sectiontimeinunit = time;\n                break;\n            case 2:\n                sectiontimeinunit = time / 60;\n                break;\n            case 3:\n                sectiontimeinunit = time / 3600;\n                break;\n            default:\n                sectiontimeinunit = 0;\n                break;\n\n        }\n        return parseFloat(sectiontimeinunit.toFixed(2));\n    };\n\n    /**\n     * Displays and updates the total quiz time.\n     *\n     * @param {string} timetype\n     */\n    const display_quiz_time = (timetype) => {\n        let quiztimer = document.querySelector('.quiztimer-time');\n        $.when(unitsstrings).done( unitsstrings => {\n            get_quiz_id(cmid).then( response => {\n                let quizid = JSON.parse(response).quizid;\n                get_quiz_time(quizid, timetype).then( r => {\n                    let time = format_pagetime(JSON.parse(r).time,unitsstrings[0], unitsstrings[1], unitsstrings[2]);\n                    if (quiztimer.innerHTML == '') {\n                        quiztimer.append(' | ' + time);\n                    } else {\n                        quiztimer.innerHTML = ' | ' + time;\n                    }\n                });\n            });\n        });\n    };\n\n    /**\n     * Returns the quiz time.\n     *\n     * @param {int} quizid\n     * @param {string} editmethod\n     * @returns\n     */\n    const get_quiz_time = (quizid, editmethod) => ajax.call([{\n        methodname: 'quizaccess_quiztimer_get_quiz_time',\n        args: {\n            quizid,\n            editmethod,\n        },\n    }])[0].done( response => {\n        return response;\n    }).fail( err => {\n        // eslint-disable-next-line no-console\n        console.log(err);\n    });\n\n    /**\n     * Sets a section time with an ajax call, updating or inserting\n     * the section with the new timedata.\n     *\n     * @param {int} quizid\n     * @param {int} sectionid\n     * @param {JSON} timedata\n     * @returns JSON string with the modified section data in db.\n     */\n    const set_section_time = (quizid, sectionid, timedata) => ajax.call([{\n        methodname: 'quizaccess_quiztimer_set_section_time',\n        args: {\n            quizid,\n            sectionid,\n            timedata: JSON.stringify(timedata),\n        },\n    }])[0].done( response => {\n        return response;\n    }).fail( err => {\n        // eslint-disable-next-line no-console\n        console.log(err);\n    });\n\n    /**\n     * Gets a section time info\n     * with an ajax call to the sections time db.\n     *\n     * @param {int} quizid\n     * @param {int} sectionid\n     * @returns JSON string with the section time.\n     */\n    const get_section_time = (quizid, sectionid) => ajax.call([{\n        methodname: 'quizaccess_quiztimer_get_section_time',\n        args: {\n            quizid,\n            sectionid,\n        },\n    }])[0].done( response => {\n        return response;\n    }).fail( err => {\n        // eslint-disable-next-line no-console\n        console.log(err);\n    });\n\n    /**\n     * Calls the ajax function to set a slot time and\n     * updates the page and section time display to reflect\n     * their time adjusted with the new question time set.\n     *\n     * @param {htmlElement} slot\n     * @returns JSON string with the modified slot info.\n     */\n    const set_question_time_call = async(slot) => {\n        let timedata = get_question_time(slot.closest('.slot'));\n        if (timedata.unit != 0) {\n            let question = slot.closest('[id^=\"slot\"]');\n            let questionid = get_question_id(question);\n            if (timedata.value != 0) {\n                if (question.querySelector('.warningtime')) {\n                    question.querySelector('.activityinstance').removeChild(question.querySelector('.warningtime'));\n                }\n            }\n            get_quiz_id(cmid).then( response => {\n                let quizid = JSON.parse(response);\n                set_question_time(quizid.quizid, questionid.questionid, timedata).then(response => {\n                    let page = get_page_from_slotid(JSON.parse(response).slot);\n                    load_page_time(page);\n                    load_section_time(question.closest('.section.main.clearfix'));\n                    display_quiz_time('slots');\n                });\n            });\n        }\n    };\n    /**\n     *\n     * @param {int} quizid\n     * @param {int} questionid\n     * @param {array} timedata\n     * @returns response with the modified slot information.\n     */\n    const set_question_time = (quizid, questionid, timedata) => ajax.call([{\n        methodname: 'quizaccess_quiztimer_set_question_time',\n        args: {\n            quizid,\n            questionid,\n            timedata: JSON.stringify(timedata),\n        },\n    }])[0].done( response => {\n        return response;\n    }).fail( err => {\n        // eslint-disable-next-line no-console\n        console.log(err);\n    });\n\n    /**\n     *\n     * @param {int} cmid\n     * @returns ajax response with the quizid\n     */\n    const get_quiz_id = (cmid) => ajax.call([{\n        methodname: 'quizaccess_quiztimer_get_quiz_id',\n        args: {\n            cmid,\n        },\n    }])[0].done(function(response) {\n        return response;\n    }).fail(function(err) {\n        // eslint-disable-next-line no-console\n        console.log(err);\n    });\n\n    /**\n     *\n     * @param {int} questionid\n     * @returns\n     */\n    const load_question_time = (questionid) => ajax.call([{\n        methodname: 'quizaccess_quiztimer_get_question_time',\n        args: {\n            questionid,\n        },\n    }])[0].done( response => {\n        return response;\n    }).fail( err => {\n        // eslint-disable-next-line no-console\n        console.log(err);\n    });\n\n    /**\n     *\n     * @param {htmlElement} slot\n     * @returns the page the slot belongs to.\n     */\n    const get_page_from_slotid = (slot) => {\n        let slotid = 'slot-' + slot;\n        let page = ($('#' + slotid).prev('.pagenumber.timed')[0]);\n        return(page);\n    };\n\n    const quiz_has_attemps = () => {\n        let quizhasattemps = document.querySelector('.statusdisplay');\n        if (quizhasattemps !== null) {\n            document.querySelector('#id_quiztimer_quizmodeselector').setAttribute('disabled', true);\n            let mainquizslots = document.querySelector('.slots');\n            let selectors = mainquizslots.querySelectorAll('select');\n            let pencils = mainquizslots.querySelectorAll('.fa-pencil');\n            selectors.forEach(selector => {\n                selector.setAttribute('disabled', true);\n            });\n            pencils.forEach(pencil => {\n                pencil.setAttribute('style', 'display:none;');\n            });\n        }\n    };\n\n    return {\n        init: async function(timetype = 'timelimit') {\n            const warningtimestr = await str.get_string('warningtime', 'quizaccess_quiztimer');\n            const noquestions = await str.get_string('noquestions', 'mod_quiz');\n            const selectatimetype = await str.get_string('selecttypetimes', 'quizaccess_quiztimer');\n            $(document).ready(function() {\n                let navitem = $('.activity-header')[0];\n                $.when(selectstrings).done( selectstrings => {\n                    let select = document.createElement('select');\n                    select.setAttribute('class', 'custom-select urlselect timeselect');\n                    select.setAttribute('id', 'id_quiztimer_quizmodeselector');\n                    select.add(new Option(selectstrings[3], 'timelimit'));\n                    select.add(new Option(selectstrings[0], 'section'));\n                    select.add(new Option(selectstrings[1], 'slots'));\n                    select.add(new Option(selectstrings[2], 'equitative'));\n                    navitem.append(select);\n                    let selectedoption = 0;\n                    if (select.options[0].value == timetype) {\n                        selectedoption = 0;\n                    } else if (select.options[1].value == timetype) {\n                        selectedoption = 1;\n                    } else if (select.options[2].value == timetype) {\n                        selectedoption = 2;\n                    } else {\n                        selectedoption = 3;\n                    }\n                    select.options[selectedoption].setAttribute('selected', 'true');\n                    select.addEventListener('change', change_time_edit_method, true);\n                });\n                let quiztime = document.createElement('span');\n                quiztime.setAttribute('class', 'quiztimer-time');\n                let slotheader = document.querySelector('.mod-quiz-edit-content').querySelector('h2');\n                slotheader.append(quiztime);\n                display_quiz_time(timetype);\n                let secrettimetype = document.createElement('input');\n                secrettimetype.setAttribute(\"type\", \"hidden\");\n                secrettimetype.setAttribute(\"name\", \"timetype\");\n                secrettimetype.setAttribute(\"value\", timetype);\n                slotheader.append(secrettimetype);\n\n                if (timetype === 'timelimit') {\n                    let sections = $('.section.main.clearfix');\n                    for (let x = 0; x < sections.length; x ++) {\n                        let section = sections[x];\n                        section.setAttribute('style', 'display:none');\n                    }\n                    let selecttypewarning = document.createElement('h2');\n                    selecttypewarning.append(selectatimetype);\n                    selecttypewarning.setAttribute('class', 'text text-info');\n                    document.querySelector('.statusbar').append(selecttypewarning);\n                    return;\n                }\n\n                let questions = $('.slot');\n                if (questions.length === 0) {\n                    let section = $('.section.main.clearfix')[0];\n                    section.setAttribute('style', 'display:none');\n                    notification.addNotification({\n                       message: noquestions,\n                       type: \"error\"\n                    });\n                    return;\n                }\n                let pagesar = [];\n                for (let x = 0; x < questions.length; x ++) {\n                    let question = questions[x];\n                    let select = question.querySelector('.time-select');\n\n                    select.addEventListener('change', adjust_question_time_display, true);\n\n                    let editpen = question.querySelector('.editing-question-time');\n                    editpen.addEventListener('click', edit_question_time, true);\n\n                    let questionid = get_question_id(question);\n                    let timeinput = question.querySelector('.question-time');\n                    load_question_time(questionid.questionid).then( (response) => {\n                        if (timetype === 'section') {\n                            question.querySelector('.time').setAttribute('style', 'display:none');\n                            select.setAttribute('style', 'display:none');\n                        } else if (timetype === 'slots') {\n                            if (JSON.parse(response) || JSON.parse(response).timevalue == 0) {\n                                let timedata = JSON.parse(response);\n                                select.value = timedata.timeunit;\n                                timeinput.innerHTML = get_time_in_unit(parseFloat(timedata.timeunit),\n                                    parseFloat(timedata.timevalue));\n                                if ((!question.querySelector('.warningtime') && timedata.timevalue == 0)) {\n                                    let warningtime = document.createElement('span');\n                                    warningtime.setAttribute('class', 'text-danger warningtime');\n                                    warningtime.append(warningtimestr);\n                                    question.querySelector('.activityinstance').appendChild(warningtime);\n                                }\n                            }\n                            let pages = $('.pagenumber.activity.timed');\n                            for (let t = 0; t < pages.length; t ++) {\n                                let page = pages[t];\n                                if (!pagesar.includes(page.id)) {\n                                    pagesar.push(page.id);\n                                }\n                                load_page_time(page);\n                            }\n                            let section = question.closest('.section.main.clearfix');\n                            section.querySelector('.time-select').options[2].setAttribute('selected', true);\n                            section.querySelector('.time-select').setAttribute('style', 'display:none');\n                            section.querySelector('.time').setAttribute('style', 'display:none');\n                            load_section_time(section);\n                            section.querySelector('.section-time').innerHTML =\n                                section.querySelector('.total-section-time').innerHTML;\n                            display_quiz_time('slots');\n                            quiz_has_attemps();\n                        } else if (timetype === 'equitative') {\n                            question.querySelector('.time').setAttribute('style', 'display:none');\n                            select.setAttribute('style', 'display:none');\n                            let pages = $('.pagenumber.activity.timed');\n                            for (let t = 0; t < pages.length; t ++) {\n                                let page = pages[t];\n                                if (!pagesar.includes(page.id)) {\n                                    pagesar.push(page.id);\n                                    load_page_time(page, false);\n                                    get_page_time_from_section(page);\n                                }\n                            }\n                        }\n\n                    });\n\n                }\n                let sections = $('.section.main.clearfix');\n                for (let x = 0; x < sections.length; x ++) {\n                    let section = sections[x];\n                    let select = section.querySelector('.time-select');\n                    select.addEventListener('change', adjust_section_time_display, true);\n\n                    let editpen = section.querySelector('.editing-section-time');\n                    editpen.addEventListener('click', edit_section_time, true);\n                    if (timetype !== 'slots') {\n                        get_section_time_call(section.closest('.section.main.clearfix')).then();\n                    }\n                }\n            });\n        },\n    };\n});\n"],"names":["define","$","ajax","notification","str","cmid","URLSearchParams","window","location","search","get","selectstrings","get_strings","key","component","unitsstrings","repaginatewarning","get_string","questiontime","async","e","invalidsettedtime","target","currentTarget","timevalue","value","replace","timedisplay","closest","querySelector","addNotification","message","type","scrollTo","top","behavior","innerHTML","removeAttribute","timeid","getAttribute","remove","set_question_time_call","this","sectiontime","timedata","get_section_time_from_slots","set_section_time_call","parseFloat","unit","adjust_question_time_display","selectedoption","get_question_time","isNaN","options","setAttribute","adjust_section_time_display","section","question","get_time_in_seconds","get_section_id","id","sectionid","substring","indexOf","get_question_id","questionid","edit_question_time","time","attr","name","size","prependTo","focus","on","edit_section_time","change_time_edit_method","when","done","repaginatestring","confirm","editmethod","url","href","k","editmethod2","split","get_quiz_id","then","response","quizid","JSON","parse","repaginate_slots","load_section_time","questions","querySelectorAll","totaltime","get_total_time_of_questions","format_pagetime","call","methodname","args","fail","err","console","log","set_section_time","get_section_time_call","document","get_page_time_from_section","warningtimestr","get_section_time","timeunit","get_time_in_unit","warningtime","createElement","append","appendChild","removeChild","text","display_quiz_time","quiz_has_attemps","t","length","parseInt","load_page_time","page","pagetime","nextUntil","pagetimeunit","create_timed_page_elements","pagevalue","pageunit","pageloadedsections","includes","push","sectionpages","seconds","minutes","hours","h","Math","floor","m","toFixed","timeinseconds","sectiontimeinunit","timetype","quiztimer","get_quiz_time","r","stringify","slot","set_question_time","get_page_from_slotid","load_question_time","prev","mainquizslots","selectors","pencils","forEach","selector","pencil","init","arguments","undefined","noquestions","selectatimetype","ready","navitem","select","add","Option","addEventListener","quiztime","slotheader","secrettimetype","sections","x","selecttypewarning","pagesar","timeinput","pages"],"mappings":"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"}