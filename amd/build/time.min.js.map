{"version":3,"file":"time.min.js","sources":["../src/time.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n/**\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine(['jquery', 'core/ajax', 'core/notification', 'core/str'], function($, ajax, notification, str) {\n\n    const urlparams = new URLSearchParams(window.location.search);\n    const cmid = urlparams.get('cmid');\n\n    const selectstrings = str.get_strings([{key: 'sectiontime', component: 'quizaccess_quiztimer'},\n                                             {key: 'questiontime', component: 'quizaccess_quiztimer'},\n                                             {key: 'distributesectiontime', component: 'quizaccess_quiztimer'}, ]);\n    const unitsstrings = str.get_strings([{key: 'seconds', component: 'quizaccess_quiztimer'},\n                                             {key: 'minutes', component: 'quizaccess_quiztimer'},\n                                             {key: 'hours', component: 'quizaccess_quiztimer'},]);\n    /**\n     * When a key is pressed, editing a question time,\n     * checks what it should do, and displays the question\n     * edit, removing the input of time edit.\n     * If necesary, inserts the time of the question in the db.\n     *\n     * @param {event} e\n     */\n    const questiontime = async function(e) {\n        const invalidsettedtime = await str.get_string('invalidsettedtime', 'quizaccess_quiztimer');\n        let target = e.currentTarget;\n        if (e.key === 'Enter') {\n            let timevalue = target.value;\n            target.value = timevalue.replace(/[^0-9].*$/,'');\n            timevalue = target.value;\n            let timedisplay = target.closest('.time').querySelector('.question-time');\n            if(timevalue == '') {\n                notification.addNotification({\n                    message: invalidsettedtime,\n                    type: \"error\"\n                 });\n                window.scrollTo({ top: 0, behavior: 'smooth' });\n            } else if (timevalue == 0) {\n                notification.addNotification({\n                    message: invalidsettedtime,\n                    type: \"error\"\n                 });\n                window.scrollTo({ top: 0, behavior: 'smooth' });\n            } else {\n                timedisplay.innerHTML = timevalue;\n            }\n            timedisplay.removeAttribute('style');\n\n            let timeid = timedisplay.getAttribute('id') + '-edit';\n            $('#' + timeid).remove();\n            set_question_time_call(timedisplay);\n        } else if (e.key === 'Escape') {\n            let timedisplay = target.closest('.time').querySelector('.question-time');\n            timedisplay.removeAttribute('style');\n            this.remove();\n        }\n    };\n\n    /**\n     * When a key is pressed, editing a section time,\n     * checks what it should do, and displays the section\n     * edit, removing the input of time edit.\n     * If necesary, inserts the time of the section in the db.\n     *\n     * @param {event} e\n     */\n    const sectiontime = async function(e) {\n        const invalidsettedtime = await str.get_string('invalidsettedtime', 'quizaccess_quiztimer');\n        let target = e.currentTarget;\n        if (e.key === 'Enter') {\n            target.value = target.value.replace(/[^0-9].*$/,'');\n            let timevalue = target.value;\n            let timedisplay = target.closest('.section-heading').querySelector('.section-time');\n            timedisplay.innerHTML = timevalue;\n            if(timevalue == '') {\n                timedisplay.innerHTML = 0;\n                notification.addNotification({\n                    message: invalidsettedtime,\n                    type: \"error\"\n                 });\n                window.scrollTo({ top: 0, behavior: 'smooth' });\n            } else if (timevalue == 0) {\n                notification.addNotification({\n                    message: invalidsettedtime,\n                    type: \"error\"\n                 });\n                window.scrollTo({ top: 0, behavior: 'smooth' });\n            }\n            timedisplay.removeAttribute('style');\n            let timeid = timedisplay.getAttribute('id') + '-edit';\n            $('#' + timeid).remove();\n            let timedata = get_section_time_from_slots(timedisplay.closest('.section-heading'));\n            set_section_time_call(timedisplay.closest('.section.main.clearfix'),\n                parseFloat(timedata.unit), parseFloat(timedata.value));\n        } else if (e.key === 'Escape') {\n            let timedisplay = target.closest('.section-heading').querySelector('.section-time');\n            timedisplay.removeAttribute('style');\n            this.remove();\n        }\n    };\n\n    /**\n     * Adjust the question time to display, when a new\n     * unit time is selected, checking beforehand if\n     * the unit is valid.\n     *\n     * @param {event} e\n     */\n    const adjust_question_time_display = function (e) {\n        let selectedoption = e.currentTarget;\n        value = selectedoption.value;\n        let timedata = get_question_time(selectedoption.closest('.slot'));\n        let value = parseFloat(timedata.value);\n        if (value !== 0 && !isNaN(value)) {\n            selectedoption.options[0].setAttribute('disabled', 'true');\n            set_question_time_call(selectedoption);\n        }\n    };\n\n    /**\n     * Adjust the section time to display, when a new\n     * unit time is selected, checking beforehand if\n     * the unit is valid.\n     *\n     * @param {event} e\n     */\n    const adjust_section_time_display = function (e) {\n        let selectedoption = e.currentTarget;\n        let section = selectedoption.closest('.section.main.clearfix');\n        let unit = selectedoption.value;\n        let value = parseFloat(section.querySelector('.section-time').innerHTML);\n        if ((value !== 0 && !isNaN(value)) && (unit !== '0' && !isNaN(unit))) {\n            selectedoption.options[0].setAttribute('disabled', 'true');\n            unit = parseFloat(section.querySelector('.time-select').options[unit].value);\n            set_section_time_call(section, unit, value);\n        }\n    };\n\n    /**\n     * Gets a question time from the page inputs.\n     *\n     * @param {event} question\n     * @returns JSON string containing the question time.\n     */\n        const get_question_time = function(question) {\n            let unit = question.querySelector('.time-select').value;\n            let timevalue = question.querySelector('.question-time').innerHTML;\n            timevalue = get_time_in_seconds(parseFloat(unit), parseFloat(timevalue));\n            return {'unit' : unit, 'value' : timevalue};\n        };\n\n    /**\n     * Gets a section time from the slots time.\n     *\n     * @param {event} section\n     * @returns JSON string containing the secton time.\n     */\n    const get_section_time_from_slots = function(section) {\n        let unit = section.querySelector('.time-select').value;\n        let timevalue = section.querySelector('.section-time').innerHTML;\n        return { 'unit' : unit ,'value' : timevalue};\n    };\n\n    /**\n     * Gets the id of a section.\n     *\n     * @param {htmlElement} section\n     * @returns JSON string with the section id\n     */\n    const get_section_id = function(section) {\n        let id = section.id;\n        let sectionid = id.substring(id.indexOf('-') + 1);\n        return { 'sectionid':sectionid};\n    };\n    /**\n     * Gets the id of a question\n     *\n     * @param {htmlElement} question\n     * @returns JSON string containing the numeric part of the question id.\n     */\n    const get_question_id = function(question) {\n        let id = question.id;\n        let slotid = id.substring(id.indexOf('-') + 1);\n        return { 'questionid':slotid};\n    };\n\n    /**\n     * When the edit question event is triggered,\n     * creates a input for editing the time, and hides\n     * the display time.\n     * Also assigns events when a key is pressed on the newly\n     * created input, aswell as a blur event.\n     *\n     * @param {event} e\n     */\n    const edit_question_time = function(e) {\n        let time = e.currentTarget.closest('.time');\n        let timevalue = time.querySelector('.question-time');\n        let timeid = timevalue.getAttribute('id') + '-edit';\n        $('<input></input>')\n            .attr({\n                'type': 'text',\n                'name': 'time',\n                'id': timeid,\n                'size': '5',\n                'value': timevalue.innerHTML\n            })\n            .prependTo(time);\n        timevalue.setAttribute('style', 'display:none');\n        $('#' + timeid).focus();\n        $('#' + timeid).on('keydown', this, questiontime);\n        $('#' + timeid).on('blur', this, function() {\n            this.closest('.time').querySelector('.question-time').removeAttribute('style');\n            this.remove();\n        });\n    };\n\n    /**\n     * When the edit section event is triggered,\n     * creates a input for editing the time, and hides\n     * the display time.\n     * Also assigns events when a key is pressed on the newly\n     * created input, aswell as a blur event.\n     *\n     * @param {event} e\n     */\n    const edit_section_time = function(e) {\n        let time = e.currentTarget.closest('.time');\n        let timevalue = time.querySelector('.section-time');\n        let timeid = timevalue.getAttribute('id') + '-edit';\n        $('<input></input>')\n            .attr({\n                'type': 'text',\n                'name': 'time',\n                'id': timeid,\n                'size': '5',\n                'value': timevalue.innerHTML,\n            })\n            .prependTo(time);\n        timevalue.setAttribute('style', 'display:none');\n        $('#' + timeid).focus();\n        $('#' + timeid).on('keydown', this, sectiontime);\n        $('#' + timeid).on('blur', this, function() {\n            this.closest('.section-heading').querySelector('.section-time').removeAttribute('style');\n            this.remove();\n        });\n    };\n\n    /**\n     * Triggered at changing the edit format used,\n     * sets a new url based on the option picked,\n     * then it redirects the user to the new url.\n     *\n     * @param {event} e\n     */\n    const change_time_edit_method = function(e) {\n        let editmethod = e.currentTarget.value;\n        let url = location.href;\n        let k = url.search('&edittype=');\n        if (k != -1) {\n            let param = url.substring(k);\n            let editmethod2 = param.split('=')[1];\n            url = url.replace(editmethod2, editmethod);\n        } else {\n            url += '&edittype=' + editmethod;\n        }\n        url = url.replace('#', '');\n        get_quiz_id(cmid).then(response => {\n            let quizid = JSON.parse(response).quizid;\n            repaginate_slots(quizid,editmethod).done( () => {\n                window.location.href = url;\n            });\n        });\n    };\n\n    /**\n     * Loads a section time based on the questions times\n     * of the section, and their unit selected.\n     *\n     * @param {htmlElement} section\n     *\n     */\n    const load_section_time = (section) => {\n        let questions = section.querySelectorAll('.slot');\n        let totaltime = get_total_time_of_questions(questions);\n        let sectiontimeunit = parseFloat(section.querySelector('.time-select').value);\n        totaltime = (get_time_in_unit(sectiontimeunit, totaltime));\n        section.querySelector('.total-section-time').innerHTML = totaltime;\n        if (parseFloat(section.querySelector('.time-select').value) === 0) {\n            section.querySelector('.total-section-unit').value = 1;\n        }\n        sectiontimeunit = section.querySelector('.time-select').options[sectiontimeunit].innerHTML;\n        section.querySelector('.total-section-unit').innerHTML = sectiontimeunit;\n    };\n\n    const repaginate_slots = (quizid, editmethod) => ajax.call([{\n        methodname: 'quizaccess_quiztimer_repaginate_slots',\n        args: {\n            quizid,\n            editmethod,\n        },\n    }])[0].done( response => {\n        return response;\n    }).fail( err => {\n        // eslint-disable-next-line no-console\n        console.log(err);\n    });\n\n    /**\n     * Sets a section time with an ajax call, saving the time\n     * information on the sections db.\n     *\n     * @param {htmlElement} section\n     * @param {int} unit\n     * @param {int} value\n     */\n    const set_section_time_call = (section, unit, value) => {\n        value = get_time_in_seconds(unit, value);\n        let timedata = {'unit' : unit, 'value' : value};\n            get_quiz_id(cmid).then( response => {\n                let quizid = JSON.parse(response).quizid;\n                let sectionid = get_section_id(section).sectionid;\n                set_section_time(quizid, sectionid, timedata).then( () => {\n                    get_section_time_call(section);\n                    let timetype = document.querySelector('input[name=\"timetype\"]');\n                    if (timetype.value == 'equitative') {\n                        get_page_time_from_section(section);\n                    }\n                });\n        });\n    };\n\n    /**\n     * Gets a section time from the db\n     * if the section dont have a time, sets it\n     * visually to 0 and no unit, without inserting in db.\n     *\n     * @param {htmlElement} section\n     */\n    const get_section_time_call = async (section) => {\n        const warningtimestr = await str.get_string('warningtime', 'quizaccess_quiztimer');\n        get_quiz_id(cmid).then( response => {\n            let quizid = JSON.parse(response).quizid;\n            let sectionid = get_section_id(section).sectionid;\n            get_section_time(quizid, sectionid).then(response => {\n                let timedata = JSON.parse(response);\n                if(!timedata) {\n                section.querySelector('.time-select').value = 2;\n                section.querySelector('.total-section-time').innerHTML = '';\n                section.querySelector('.total-section-unit').innerHTML = '';\n                section.querySelector('.section-time').innerHTML = 0;\n                }\n                let unit = timedata.timeunit;\n                let value = get_time_in_unit(parseFloat(unit), parseFloat(timedata.timevalue));\n                if (value === 0) {\n                    section.querySelector('.time-select').value = 2;\n                    if (!section.querySelector('.warningtime')) {\n                        let warningtime = document.createElement('span');\n                        warningtime.setAttribute('class', 'text-danger warningtime');\n                        warningtime.append(warningtimestr);\n                        section.querySelector('.section-heading').appendChild(warningtime);\n                    }\n                } else {\n                    section.querySelector('.time-select').value = unit;\n                    if (section.querySelector('.warningtime')) {\n                        section.querySelector('.section-heading').removeChild(section.querySelector('.warningtime'));\n                    }\n                }\n                section.querySelector('.total-section-time').innerHTML = value;\n                section.querySelector('.total-section-unit').innerHTML = section.querySelector('.time-select').options[unit].text;\n                section.querySelector('.section-time').innerHTML = value;\n                display_quiz_time('section');\n                quiz_has_attemps();\n            });\n        });\n    };\n\n    /**\n     * Gets the total amount of time of the selected questions\n     * and returns it in seconds.\n     *\n     * @param {array} questions\n     * @returns int total questions time in seconds.\n     */\n    const get_total_time_of_questions = (questions) => {\n        let totaltime = 0;\n        for(let t = 0; t < questions.length; t ++) {\n            let timeunit = parseInt(questions[t].querySelector('.time-select').value);\n            let time = parseFloat(questions[t].querySelector('.question-time').innerHTML);\n            let timeinseconds = get_time_in_seconds(timeunit, time);\n            totaltime += timeinseconds;\n        }\n        return totaltime;\n    };\n\n\n    /**\n     * Given a page, if it exist, updates the displayed time\n     * else creates the page elements for time control.\n     *\n     * @param {htmlElement} page\n     */\n    const load_page_time = (page) => {\n\n        if (page.querySelector('.pagetime')) {\n            let pagetime = page.querySelector('.pagetime');\n            let time = pagetime.querySelector('.total-page-time');\n            let unit = pagetime.querySelector('.total-page-unit');\n            let question = $(page).nextUntil('.pagenumber.activity.timed');\n            let totaltime = get_total_time_of_questions(question);\n            let pagetimeunit = parseFloat(question[0].querySelector('.time-select').value);\n            totaltime = (get_time_in_unit(pagetimeunit, totaltime));\n            time.innerHTML = totaltime;\n            unit.innerHTML = question[0].querySelector('.time-select').options[pagetimeunit].innerHTML;\n        } else {\n            create_timed_page_elements(page);\n        }\n    };\n\n    /**\n     * Generates all the html elements to edit a page time[TODO],\n     * the time of the page, based on the containing slot,\n     * aswell as assign them the properties to modify the time.\n     *\n     * @param {htmlElement} page\n     */\n    const create_timed_page_elements = (page) => {\n        let id = page.getAttribute('id');\n        let question = $('#' + id).nextUntil('.pagenumber.activity.timed');\n        let totaltime = get_total_time_of_questions(question);\n        let pagetimeunit = parseFloat(question[0].querySelector('.time-select').value);\n        totaltime = (get_time_in_unit(pagetimeunit, totaltime));\n        let pagetime = document.createElement('span');\n        pagetime.setAttribute('class', 'pagetime');\n        page.append(pagetime);\n\n        let pagevalue = document.createElement('span');\n        pagevalue.setAttribute('class', 'total-page-time');\n        pagevalue.innerHTML = totaltime;\n        pagetime.append(pagevalue);\n\n        let pageunit = document.createElement('span');\n        pageunit.setAttribute('class', 'total-page-unit');\n        pagetime.append(' ');\n        pagetime.append(pageunit);\n    };\n\n    /**\n     * Loads tbe page time\n     *\n     * @param {htmlElement} page\n     */\n    const get_page_time_from_section = (page) => {\n        var pageloadedsections = [];\n        let section = page.closest('.section.main.clearfix');\n        if (!pageloadedsections.includes(section.id)) {\n            pageloadedsections.push(section.id);\n            let sectionpages = section.querySelectorAll('.pagenumber');\n            let sectionid = get_section_id(section).sectionid;\n            get_quiz_id(cmid).then( response => {\n                let quizid = JSON.parse(response).quizid;\n                get_section_time(quizid, sectionid).then( response => {\n                    let totalsectime = JSON.parse(response).timevalue;\n                    let pagetime = totalsectime / sectionpages.length;\n                    $.when(unitsstrings).done( unitsstrings => {\n                        pagetime = format_pagetime(pagetime, unitsstrings[0], unitsstrings[1], unitsstrings[2]);\n                        for (let t = 0; t < sectionpages.length; t ++) {\n                            sectionpages[t].querySelector('.total-page-time').innerHTML = pagetime;\n                        }\n                    });\n                });\n            });\n        }\n    };\n\n    /**\n     * Formats the time in seconds, and gets a\n     * string to display the units using moodle lang strings.\n     *\n     * @param {int} time\n     * @param {string} seconds\n     * @param {string} minutes\n     * @param {string} hours\n     * @returns {string} formatted time\n     */\n    const format_pagetime = (time, seconds, minutes, hours) => {\n        let pagetime = '';\n        if (time / 3600 >= 1) {\n            let h = Math.floor(time / 3600);\n            if (time % 3600 !== 0) {\n                if (time % 3600 >= 60) {\n                    if ((time % 3600) % 60 !== 0 ) {\n                        let m = Math.floor((time % 3600) / 60);\n                        let s = (time % 3600) % 60;\n                        pagetime = h + ' ' + hours + ' ' + m + ' ' + minutes + ' ' + s + ' ' + seconds;\n                        return pagetime;\n                    }\n                    let m = (time % 3600) / 60;\n                    pagetime = h + ' ' + hours + ' ' + m + ' ' + minutes;\n                    return pagetime;\n                }\n                let s = (time % 3600);\n                pagetime = h + ' ' + hours + ' ' + s + ' ' + seconds;\n                return pagetime;\n            }\n            pagetime = h + ' ' + hours;\n            return pagetime;\n        } else if (time / 60 >= 1) {\n            let m = Math.floor(time / 60);\n            if (time % 60 !== 0) {\n                let s = +(time % 60).toFixed(2);\n                pagetime = m + ' ' + minutes + ' ' + s + ' ' + seconds;\n                return pagetime;\n            }\n            pagetime = m + ' ' + minutes;\n            return pagetime;\n        } else {\n            pagetime = +time.toFixed(2) + ' ' + seconds;\n            return pagetime;\n        }\n    };\n\n    /**\n     * Gets the time to set in seconds for the insert\n     * in the database.\n     *\n     * @param {int} timeunit\n     * @param {int} time\n     * @returns the time to insert in the database.\n     */\n    const get_time_in_seconds = (timeunit, time) => {\n        let timeinseconds = 0;\n        switch (timeunit) {\n            case 1:\n                timeinseconds = time;\n                break;\n            case 2:\n                timeinseconds = time * 60;\n                break;\n            case 3:\n                timeinseconds = time * 3600;\n                break;\n            default:\n                timeinseconds = 0;\n                break;\n\n        }\n        return timeinseconds;\n    };\n\n    /**\n     * Gets the time in the unit requested\n     * to show.\n     *\n     * @param {int} timeunit\n     * @param {int} time\n     * @returns the time in the selected unit.\n     */\n    const get_time_in_unit = (timeunit, time) => {\n        let sectiontimeinunit = 0;\n        switch (timeunit) {\n            case 1:\n                sectiontimeinunit = time;\n                break;\n            case 2:\n                sectiontimeinunit = time / 60;\n                break;\n            case 3:\n                sectiontimeinunit = time / 3600;\n                break;\n            default:\n                sectiontimeinunit = 0;\n                break;\n\n        }\n        return parseFloat(sectiontimeinunit.toFixed(2));\n    };\n\n    /**\n     * Displays and updates the total quiz time.\n     *\n     * @param {string} timetype\n     */\n    const display_quiz_time = (timetype) => {\n        let quiztimer = document.querySelector('.quiztimer-time');\n        $.when(unitsstrings).done( unitsstrings => {\n            get_quiz_id(cmid).then( response => {\n                let quizid = JSON.parse(response).quizid;\n                get_quiz_time(quizid, timetype).then( r => {\n                    let time = format_pagetime(JSON.parse(r).time,unitsstrings[0], unitsstrings[1], unitsstrings[2]);\n                    if (quiztimer.innerHTML == '') {\n                        quiztimer.append(' | ' + time);\n                    } else {\n                        quiztimer.innerHTML = ' | ' + time;\n                    }\n                });\n            });\n        });\n    };\n\n    /**\n     * Returns the quiz time.\n     *\n     * @param {int} quizid\n     * @param {string} editmethod\n     * @returns\n     */\n    const get_quiz_time = (quizid, editmethod) => ajax.call([{\n        methodname: 'quizaccess_quiztimer_get_quiz_time',\n        args: {\n            quizid,\n            editmethod,\n        },\n    }])[0].done( response => {\n        return response;\n    }).fail( err => {\n        // eslint-disable-next-line no-console\n        console.log(err);\n    });\n\n    /**\n     * Sets a section time with an ajax call, updating or inserting\n     * the section with the new timedata.\n     *\n     * @param {int} quizid\n     * @param {int} sectionid\n     * @param {JSON} timedata\n     * @returns JSON string with the modified section data in db.\n     */\n    const set_section_time = (quizid, sectionid, timedata) => ajax.call([{\n        methodname: 'quizaccess_quiztimer_set_section_time',\n        args: {\n            quizid,\n            sectionid,\n            timedata: JSON.stringify(timedata),\n        },\n    }])[0].done( response => {\n        return response;\n    }).fail( err => {\n        // eslint-disable-next-line no-console\n        console.log(err);\n    });\n\n    /**\n     * Gets a section time info\n     * with an ajax call to the sections time db.\n     *\n     * @param {int} quizid\n     * @param {int} sectionid\n     * @returns JSON string with the section time.\n     */\n    const get_section_time = (quizid, sectionid) => ajax.call([{\n        methodname: 'quizaccess_quiztimer_get_section_time',\n        args: {\n            quizid,\n            sectionid,\n        },\n    }])[0].done( response => {\n        return response;\n    }).fail( err => {\n        // eslint-disable-next-line no-console\n        console.log(err);\n    });\n\n    /**\n     * Calls the ajax function to set a slot time and\n     * updates the page and section time display to reflect\n     * their time adjusted with the new question time set.\n     *\n     * @param {htmlElement} slot\n     * @returns JSON string with the modified slot info.\n     */\n    const set_question_time_call = async(slot) => {\n        let timedata = get_question_time(slot.closest('.slot'));\n        if (timedata.unit != 0) {\n            let question = slot.closest('[id^=\"slot\"]');\n            let questionid = get_question_id(question);\n            if (timedata.value != 0) {\n                if (question.querySelector('.warningtime')) {\n                    question.querySelector('.activityinstance').removeChild(question.querySelector('.warningtime'));\n                }\n            }\n            get_quiz_id(cmid).then( response => {\n                let quizid = JSON.parse(response);\n                set_question_time(quizid.quizid, questionid.questionid, timedata).then(response => {\n                    let page = get_page_from_slotid(JSON.parse(response).slot);\n                    load_page_time(page);\n                    load_section_time(question.closest('.section.main.clearfix'));\n                    display_quiz_time('slots');\n                });\n            });\n        }\n    };\n    /**\n     *\n     * @param {int} quizid\n     * @param {int} questionid\n     * @param {array} timedata\n     * @returns response with the modified slot information.\n     */\n    const set_question_time = (quizid, questionid, timedata) => ajax.call([{\n        methodname: 'quizaccess_quiztimer_set_question_time',\n        args: {\n            quizid,\n            questionid,\n            timedata: JSON.stringify(timedata),\n        },\n    }])[0].done( response => {\n        return response;\n    }).fail( err => {\n        // eslint-disable-next-line no-console\n        console.log(err);\n    });\n\n    /**\n     *\n     * @param {int} cmid\n     * @returns ajax response with the quizid\n     */\n    const get_quiz_id = (cmid) => ajax.call([{\n        methodname: 'quizaccess_quiztimer_get_quiz_id',\n        args: {\n            cmid,\n        },\n    }])[0].done(function(response) {\n        return response;\n    }).fail(function(err) {\n        // eslint-disable-next-line no-console\n        console.log(err);\n    });\n\n    /**\n     *\n     * @param {int} questionid\n     * @returns\n     */\n    const load_question_time = (questionid) => ajax.call([{\n        methodname: 'quizaccess_quiztimer_get_question_time',\n        args: {\n            questionid,\n        },\n    }])[0].done( response => {\n        return response;\n    }).fail( err => {\n        // eslint-disable-next-line no-console\n        console.log(err);\n    });\n\n    /**\n     *\n     * @param {htmlElement} slot\n     * @returns the page the slot belongs to.\n     */\n    const get_page_from_slotid = (slot) => {\n        let slotid = 'slot-' + slot;\n        let page = ($('#' + slotid).prev('.pagenumber.timed')[0]);\n        return(page);\n    };\n\n    const quiz_has_attemps = () => {\n        let quizhasattemps = document.querySelector('.statusdisplay');\n        if (quizhasattemps !== null) {\n            let mainquizslots = document.querySelector('.slots');\n            let selectors = mainquizslots.querySelectorAll('select');\n            let pencils = mainquizslots.querySelectorAll('.fa-pencil');\n            selectors.forEach(selector => {\n                selector.setAttribute('disabled', true);\n            });\n            pencils.forEach(pencil => {\n                pencil.setAttribute('style', 'display:none;');\n            });\n        }\n    };\n\n    return {\n        init: async function(timetype = 'section') {\n            const warningtimestr = await str.get_string('warningtime', 'quizaccess_quiztimer');\n            const noquestions = await str.get_string('noquestions', 'mod_quiz');\n            $(document).ready(function() {\n                let navitem = $('.activity-header')[0];\n                $.when(selectstrings).done( selectstrings => {\n                    let select = document.createElement('select');\n                    select.setAttribute('class', 'custom-select urlselect timeselect');\n                    select.setAttribute('id', 'id_quiztimer_quizmodeselector');\n                    select.add(new Option(selectstrings[0], 'section'));\n                    select.add(new Option(selectstrings[1], 'slots'));\n                    select.add(new Option(selectstrings[2], 'equitative'));\n                    navitem.append(select);\n                    let selectedoption = 0;\n                    if (select.options[0].value == timetype) {\n                        selectedoption = 0;\n                    } else if (select.options[1].value == timetype) {\n                        selectedoption = 1;\n                    } else {\n                        selectedoption = 2;\n                    }\n                    select.options[selectedoption].setAttribute('selected', 'true');\n                    select.addEventListener('change', change_time_edit_method, true);\n                });\n                let quiztime = document.createElement('span');\n                quiztime.setAttribute('class', 'quiztimer-time');\n                let slotheader = document.querySelector('.mod-quiz-edit-content').querySelector('h2');\n                slotheader.append(quiztime);\n                display_quiz_time(timetype);\n                let secrettimetype = document.createElement('input');\n                secrettimetype.setAttribute(\"type\", \"hidden\");\n                secrettimetype.setAttribute(\"name\", \"timetype\");\n                secrettimetype.setAttribute(\"value\", timetype);\n                slotheader.append(secrettimetype);\n\n                let questions = $('.slot');\n                if (questions.length === 0) {\n                    let section = $('.section.main.clearfix')[0];\n                    section.setAttribute('style', 'display:none');\n                    notification.addNotification({\n                       message: noquestions,\n                       type: \"error\"\n                    });\n                    return;\n                }\n                let pagesar = [];\n                for (let x = 0; x < questions.length; x ++) {\n                    let question = questions[x];\n                    let select = question.querySelector('.time-select');\n\n                    select.addEventListener('change', adjust_question_time_display, true);\n\n                    let editpen = question.querySelector('.editing-question-time');\n                    editpen.addEventListener('click', edit_question_time, true);\n\n                    let questionid = get_question_id(question);\n                    let timeinput = question.querySelector('.question-time');\n                    load_question_time(questionid.questionid).then( (response) => {\n                        if (timetype === 'section') {\n                            question.querySelector('.time').setAttribute('style', 'display:none');\n                            select.setAttribute('style', 'display:none');\n                        } else if (timetype === 'slots') {\n                            if (JSON.parse(response) || JSON.parse(response).timevalue == 0) {\n                                let timedata = JSON.parse(response);\n                                select.value = timedata.timeunit;\n                                timeinput.innerHTML = get_time_in_unit(parseFloat(timedata.timeunit),\n                                    parseFloat(timedata.timevalue));\n                                if ((!question.querySelector('.warningtime') && timedata.timevalue == 0)) {\n                                    let warningtime = document.createElement('span');\n                                    warningtime.setAttribute('class', 'text-danger warningtime');\n                                    warningtime.append(warningtimestr);\n                                    question.querySelector('.activityinstance').appendChild(warningtime);\n                                }\n                            }\n                            let pages = $('.pagenumber.activity.timed');\n                            for (let t = 0; t < pages.length; t ++) {\n                                let page = pages[t];\n                                if (!pagesar.includes(page.id)) {\n                                    pagesar.push(page.id);\n                                }\n                                load_page_time(page);\n                            }\n                            let section = question.closest('.section.main.clearfix');\n                            section.querySelector('.time-select').options[2].setAttribute('selected', true);\n                            section.querySelector('.time-select').setAttribute('style', 'display:none');\n                            section.querySelector('.time').setAttribute('style', 'display:none');\n                            load_section_time(section);\n                            section.querySelector('.section-time').innerHTML =\n                                section.querySelector('.total-section-time').innerHTML;\n                            display_quiz_time('slots');\n                            quiz_has_attemps();\n                        } else if (timetype === 'equitative') {\n                            question.querySelector('.time').setAttribute('style', 'display:none');\n                            select.setAttribute('style', 'display:none');\n                            let pages = $('.pagenumber.activity.timed');\n                            for (let t = 0; t < pages.length; t ++) {\n                                let page = pages[t];\n                                if (!pagesar.includes(page.id)) {\n                                    pagesar.push(page.id);\n                                    load_page_time(page, false);\n                                    get_page_time_from_section(page);\n                                }\n                            }\n                        }\n\n                    });\n\n                }\n                let sections = $('.section.main.clearfix');\n                for (let x = 0; x < sections.length; x ++) {\n                    let section = sections[x];\n                    let select = section.querySelector('.time-select');\n                    select.addEventListener('change', adjust_section_time_display, true);\n\n                    let editpen = section.querySelector('.editing-section-time');\n                    editpen.addEventListener('click', edit_section_time, true);\n                    if (timetype !== 'slots') {\n                        get_section_time_call(section.closest('.section.main.clearfix')).then();\n                    }\n                }\n            });\n        },\n    };\n});\n"],"names":["define","$","ajax","notification","str","cmid","URLSearchParams","window","location","search","get","selectstrings","get_strings","key","component","unitsstrings","questiontime","async","e","invalidsettedtime","get_string","target","currentTarget","timevalue","value","replace","timedisplay","closest","querySelector","addNotification","message","type","scrollTo","top","behavior","innerHTML","removeAttribute","timeid","getAttribute","remove","set_question_time_call","sectiontime","timedata","get_section_time_from_slots","set_section_time_call","parseFloat","unit","adjust_question_time_display","selectedoption","get_question_time","isNaN","options","setAttribute","adjust_section_time_display","section","question","get_time_in_seconds","get_section_id","id","substring","indexOf","get_question_id","edit_question_time","time","attr","prependTo","focus","on","this","edit_section_time","change_time_edit_method","editmethod","url","href","k","editmethod2","split","get_quiz_id","then","response","quizid","JSON","parse","repaginate_slots","done","load_section_time","questions","querySelectorAll","totaltime","get_total_time_of_questions","sectiontimeunit","get_time_in_unit","call","methodname","args","fail","err","console","log","sectionid","set_section_time","get_section_time_call","document","get_page_time_from_section","warningtimestr","get_section_time","timeunit","warningtime","createElement","append","appendChild","removeChild","text","display_quiz_time","quiz_has_attemps","t","length","parseInt","load_page_time","page","pagetime","nextUntil","pagetimeunit","create_timed_page_elements","pagevalue","pageunit","pageloadedsections","includes","push","sectionpages","when","format_pagetime","seconds","minutes","hours","h","Math","floor","m","toFixed","timeinseconds","sectiontimeinunit","timetype","quiztimer","get_quiz_time","r","stringify","slot","questionid","set_question_time","get_page_from_slotid","load_question_time","prev","mainquizslots","selectors","pencils","forEach","selector","pencil","init","noquestions","ready","navitem","select","add","Option","addEventListener","quiztime","slotheader","secrettimetype","pagesar","x","timeinput","pages","sections"],"mappings":"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"}